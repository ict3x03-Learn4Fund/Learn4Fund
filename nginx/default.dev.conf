# nginx will proxy request to api server and client server
upstream api{
    # here backend is our service name
    # 5000 is a port on which our server is listening
    server backend:5000;
}

upstream client{
    # here frontend is our service name
    # 3000 is a port on which our react.js is listening
    server frontend:3000;
}

# Rate Limiting
limit_req_zone $binary_remote_addr zone=mylimit:10m rate=5r/s;
limit_req_status 429;

# nginx server block

server{
    # nginx server is listening on port 80
    listen 80;
    return 301 https://$host$request_uri;
}

# Main server
server{
    listen 443 ssl http2;

    include /config/nginx/ssl.conf;
   # when request header will contain  "/" then our request will forward to our client server
   # react.js server is behaving as a client server

   # Uncomment below to limit file upload size, 1M = 1mb; 0 = not checked
   # client_max_body_size 0;
    
    location / {
        limit_req zone=mylimit;

        proxy_pass http://client;

        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
    }
 

# to enable hot reloading  in react.js app
#    location /sockjs-node {
#        proxy_pass http://client;
#
#        proxy_http_version 1.1;
#       proxy_set_header Upgrade $http_upgrade;
#        proxy_set_header Connection "Upgrade";
#    } 

# when user enter /api in url then request will forward to our backend
    location /api {
        # suppose user send request to /api/all then we get only "/all" part and delete "/api" part from url
        rewrite /api/(.*) /$1 break;
        proxy_pass http://api;

        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
    }
}
